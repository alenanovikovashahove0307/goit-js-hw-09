{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA+CA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAM,CAAEF,WAAUC,SAClBE,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQL,GAGRM,EAAON,E,GAERD,E,IA1DMS,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAWF,IAVA,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCO,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEhCG,EAAeL,EAEVM,EAAI,EAAGA,GAAKF,EAAQE,IAC3BzB,EAAcyB,EAAGD,GACdE,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjB0B,EAAA9B,GAAS+B,OAAOC,KAAK,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAEpE8B,OAAM,SAAAL,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClB0B,EAAA9B,GAAS+B,OAAOC,KAAK,sBAAuCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGtEsB,GAAgBF,EAGlBN,EAAWK,MAAQ,GACnBJ,EAAUI,MAAQ,GAClBH,EAAYG,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  let currentDelay = delay;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.info(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.info(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    currentDelay += step;\n  }\n\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n}\n//   let delay = Number(form.delay.value);\n\n//   for (let i = 1; i <= form.amount.value; i += 1) {\n//     createPromise(i, delay)\n//       .then(({ position, delay }) => {\n//         console.log (`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log (`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     delay += Number(form.step.value);\n//   }\n// }\n\nfunction createPromise(position, delay) {\n  const obj = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(obj);\n      } else {\n        // Reject\n        reject(obj);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","obj","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayInput","stepInput","amountInput","delay1","parseInt","value","step","amount","currentDelay","i","then","param","$parcel$interopDefault","Notify","info","concat","catch"],"version":3,"file":"03-promises.b918976d.js.map"}